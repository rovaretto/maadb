/' Copyright 2020 Walgreen Co. '/
@startuml

!include define.puml
AddCopyright()


 
  note as N
    <b>Partition Key</b>:
      bucket String -> "LOCATION_B1"
    <b>Unique Key</b>:
      locationCode
    <b>Throughput</b>:
     N.A.
  end note

skinparam linetype ortho

  Collection(LOC_example, Consistent,bucket,Yes){

      Document(Example,Example,v1.0.0){
          Entity(Example,"Example")<<main>>{
            idxRequired(documentType) Typology(DocumentTypology)
            idxRequired(locationCode) String
            idxRequired(locationID) String
            idxRequired(locationType) Typology(LocationTypology)
            indexed(FacilityIndicator) Boolean
            indexed(typeCode) String
            indexed(typeDescription) Typology(TypeDescriptionTypology)
            fieldListIdx(associatedFacilities,String)
            required(status) Typology(LocationStatus)
            required(locationName) String
            indexed(lastUpdateDatetime) Timestamp
            indexed(rolloutVersion) String
            indexed(rolloutNameSpace) String
            --
            embeddedListRq(locationOpenHours,LocationOpenHour)
            embeddedListRq(addresses,Address)
            embeddedListRq(contacts,Contact)
            fieldList(legacySystemInfos,String)
            embeddedList(locationHolidayHours,LocationHolidayHour)
            embeddedList(associatedMfcInfos,AssociatedMfcInfo)
            embeddedList(stateLicenses,License)
            ==
            field(alias) String
            field(brandName) String
            field(driveThruLane) Number
            field(intersection) String
            field(numberOfTerminals) Int
            field(taxCalculationType) Typology(TaxCalculationTypology)
            field(taxRate) Number
            field(urbanicity) Typology(UrbanicityTypology)
            field(lastActivationDatetime) Timestamp
          }


          EmbeddedEntity(LocationCoding,LocationCoding)<<embedded>>{
            indexed(bcnCode) String
            indexed(bsnCode) String
            indexed(hinCode) String
            indexed(nabpCode) String
            indexed(npiCode) String
            indexed(sinCode) String
            indexed(upinCode) String
            ==
          }

          EmbeddedEntity(Address,Address)<<embedded>>{
            idxRequired(timezone) String
            idxRequired(city) String
            idxRequired(state) String
            idxRequired(stateName) String
            idxRequired(postalCode) String
            idxRequired(latitude) Number
            idxRequired(longitude) Number
            idxRequired(addressLine1) String
            indexed(addressLine2) String
            indexed(phoneNumber) String
            indexed(country) String
            indexed(county) String
            indexed(addressType) String
            indexed(areaState) String
            ==
          }

          EmbeddedEntity(License,License)<<embedded>>{
            required(licenseType) String
            required(number) String
            ==
            field(state) String
            field(expirationDate) Date
            field(status) String
            field(suffix) Int
          }

          EmbeddedEntity(PicIdentifier,PicIdentifier)<<embedded>>{
            required(employeeType) Typology(EmployeeTypology)
            required(employeeNumber) String
            ==
          }

          EmbeddedEntity(InternalAreaCode,InternalAreaCode)<<embedded>>{
            idxRequired(areaCodeType) Typology(InternalAreaCodingTypology)
            idxRequired(areaCodeValue) String
            idxRequired(areaCodeDescription) String
            ==
          }

          EmbeddedEntity(LocationOpenHour,LocationOpenHour)<<embedded>>{
            embeddedListRq(openHourDayByWeeks,OpenHourDayByWeek)
            ==
            field(startDate) Date
            field(endDate) Date
            field(twentyFourHour) Boolean
            field(overwrite) Boolean
          }
          EmbeddedEntity(OpenHourDayByWeek,OpenHourDayByWeek)<<embedded>>{
            field(day) Int
            field(openTime) String
            field(closeTime) String
            ==
          }

          EmbeddedEntity(LocationHolidayHour,"LocationHolidayHour")<<embedded>>{
            required(holidayDate) Date
            required(holidayDescription) String
            required(openTime) String
            required(closeTime) String
          }

          EmbeddedEntity(AssociatedMfcInfo,"AssociatedMfcInfo")<<embedded>>{
            idxRequired(mfcNumber) String
            idxRequired(storeType) String
            required(activeIndicator) Boolean
            idxRequired(creationDatetime) Timestamp
            indexed(lastUpdateDatetime) Timestamp
          }

      }
      Location "1" --> "0..F" LocationCoding
      Location "1" --> "1..F" Address
      Location "1" --> "1..F" License

      Location "1" --> "0..F" InternalAreaCode
      Location "1" --> "0..1" PicIdentifier
      Location "1" --> "1..*" LocationOpenHour
      LocationOpenHour "1" --> "1..F" OpenHourDayByWeek
      Location "1" --> "0..*" LocationHolidayHour
      Location  -right[hidden]- LocationHolidayHour
      Location "1" --> "0..F" AssociatedMfcInfo


  }
@enduml

@startuml

!include define.puml
AddCopyright()


 EnumDefBlock(Enumerations){
    Enum(LocationTypology,"LocationTypology")<<enum>>{
      Pharmacy, Store, HealthcareClinic
    }
    Enum(ReturnShipmentPreferenceTypology,"ReturnShipmentPreferenceTypology")<<enum>>{
        FEDEX,
        WALGREENS_FLEET,
        UPS
    }

    Enum(EstablishedIndicatorTypology,"EstablishedIndicatorTypology")<<enum>>{
          Established,
          NonEstablished,
          UnOpened
    }

    Enum(DocumentTypology,"DocumentTypology")<<enum>>{
             LOCATION
    }

    Enum(LocationStatusTypology,"LocationStatus")<<enum>>{
            Close,
            Dead,
            LandBank,
            OnHold,
            Open,
            PendingOpen
    }

    Enum(ContactTypology,"ContactTypology")<<enum>>{
          Email,
          Fax,
          Mobile,
          Phone,
          Web
    }

     Enum(ContactPriorityTypology,"ContactPriorityTypology")<<enum>>{
            Primary,
            Alternate1,
            Alternate2
     }


    Enum(DayTypology,"DayTypology")<<enum>>{
          MONDAY,
          TUESDAY,
          WEDNESDAY,
          THURSDAY,
          FRIDAY,
          SATURDAY,
          SUNDAY
    }

    Enum(TaxCalculationTypology,"TaxCalculationTypology")<<enum>>{
          TAX_FIXED_RATE,
          TAX_COST_PFEE_MCOPAY,
          TAX_COST_PLUS_FEE,
          TAX_COST
    }

     Enum(InternalAreaCodingTypology,"InternalAreaCodingTypology")<<enum>>{
          AREA,
          DISTRICT,
          OPERATION,
          REGION
     }

     Enum(EmployeeTypology,"EmployeeTypology")<<enum>>{
           CONSULTANT,
           CSR,
           EMPLOYEE,
           WAGBPO,
           WHSCSR
     }

     Enum(TypeDescriptionTypology,"TypeDescriptionTypology")<<enum>>{
         REGULAR,
         WALGREEN_PHARMACY,
         WIRS,
         MAIL_SERVICE_PHARMACY,
         HEALTH_SYSTEM_PHARMACY,
         OUTLET,
         TEMPORARY_PHARMACY,
         TEMP_INTERSTORE_XFER,
         WIRS_SATELLITE,
         SPECIALTY_PHARMACY,
         E_COMMERCE,
         REMOTE_RX_VERIFICATION,
         PEAPOD,
         N_A,
         WORKSITE_PHARMACY,
         EMPLOYER_HEALTH_UNIT,
         LONG_TERM_PHARMACY,
         TELEPHARMACY_KIOSK,
         TELEPHARMACY_SATELLITE,
         CORPORATE_FACILITIES,
         COMMUNITY_PHARMACY,
         INNOVATION_CENTER
     }


     Enum(RollingGroupTypology,RollingGroupTypology)<<enum>>{
        ROLLED,
        COEXISTENCE,
        NOT_ROLLED,
        FORECAST_VALIDATION,
        OPOL_VALIDATION
      }

      Enum(PredictiveModelTypology,PredictiveModelTypology)<<enum>>{
        RXI,
        RXA,
        RXI_RXA
      }

      Enum(UrbanicityTypology,UrbanicityTypology)<<enum>>{
       RURAL, 
       SUBURBAN, 
       URBAN,
       LESS_DENSE_URBAN, 
       NONE
      }

  }


  @enduml